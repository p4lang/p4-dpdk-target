This document describes simple test scenario and provides sample commands to run the test manually.

Versioning              : commit-id
==================================================================================================================================================
p4sde                   : 9c532ecb50cb32a49ccfd72cb1cb8ab4f73c69db
p4c                     : bad00d940a7913d6df671dc4947409982d5f7a84
==================================================================================================================================================

artifacts generation steps:
============================
simple_lpm.p4 is compiled using p4c-dpdk compiler and below are p4c-dpdk compiler version and artifacts generated.

p4c-dpdk :  version - 1.2.2.3 (SHA: bad00d940 BUILD: RELEASE)
artifacts:  tdi.json, context.json, sample_lpm.spec.spec and p4Info.txt

Command to generate artifacts:
/root/p4c/p4c/build/p4c-dpdk -I /root/p4c/p4c/build/p4include --p4v=16 --p4runtime-files ./p4Info.txt -I /root/p4c/p4c/build/p4include/dpdk -o ./pipe/sample_lpm.spec --arch pna --bf-rt-schema ./bf-rt.json --context ./pipe/context.json --tdi tdi.json sample_lpm.p4

Test scenario  :
================
1. Add rule to send
2. Packet from interface "TAP0" should reach interface "TAP2"
3. Delete rule and packet should not reach interface "TAP2"

BF_RT commands:
===============
tdi_python
tdi.sample_lpm.enable
pipe = tdi.sample_lpm.pipe.MainControlImpl
from netaddr import IPAddress
pipe.ipv4_da_lpm.add_with_next_hop(dstAddr=IPAddress('192.168.2.0'), dstAddr_p_length=24,vport=2)
pipe.ipv4_da_lpm.get(dstAddr=IPAddress('192.168.2.0'),dstAddr_p_length=24)
pipe.ipv4_da_lpm.dump
pipe.ipv4_da_lpm.delete(dstAddr=IPAddress('192.168.2.0'),dstAddr_p_length=24)
pipe.ipv4_da_lpm.dump

Scapy commands:
===============
otr_dmac="aa:bb:cc:dd:00:00"
otr_smac="9e:ba:ce:98:d9:d3"
otr_sip='192.168.1.10'
otr_dip='192.168.2.12'
tcp_sport = 7777
tcp_dport = 8888
sendp(Ether(dst=otr_dmac, src=otr_smac)/IP(src=otr_sip, dst=otr_dip)/TCP(sport=tcp_sport, dport=tcp_dport)/Raw(load="0"*50), iface='TAP0')

Test with traffic:
==================
1. Bring up all tap interface.
    - ifconfig TAP0 up;ifconfig TAP1 up;ifconfig TAP2 up;ifconfig TAP3 up
2. Send packet from Scapy on interface "TAP0".
3. Run packet capture on interface "TAP2".
    - tcpdump -i TAP1 -XX
